rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents { // {database} clause to indicates that these rules apply to all databases in Firestore

    match /{document=**} {
      allow read: if request.auth != null;
      allow create: if request.auth.token.email_verified == true;
      allow update: if request.auth.token.email_verified == true;
      allow delete: if request.auth.token.email_verified == true;
    }
    
    /** VALIDATION FUNCTIONS **/
    function checkMandatory( prop) {
      return prop != null && prop !="";
    }
    /*
     *  Person
     */

    match /{person}/{document=**}{
      allow create:
          if request.auth.token.email_verified == true
          && request.resource.data.personId != null ? checkMandatory(request.resource.data.personId) : true
          && request.resource.data.personName != null ? checkMandatory(request.resource.data.personName) : true
          && request.resource.data.gender != null ? checkMandatory(request.resource.data.gender) : true
          && request.resource.data.birthDate != null ? checkMandatory(request.resource.data.birthDate) : true
          && request.resource.data.email != null ? checkMandatory(request.resource.data.email) : true
          && request.resource.data.phoneNumber != null ? checkMandatory(request.resource.data.phoneNumber) : true
          && request.resource.data.address != null ? checkMandatory(request.resource.data.address) : true
          && request.resource.data.iban != null ? checkMandatory(request.resource.data.iban) : true
          ;
      
      allow update:
          if request.auth.token.email_verified == true
          && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role', 'personName', 'gender', 'birthDate', 'email', 'phoneNumber', 'address', 'iban']))
          && request.resource.data.personName != null ? checkMandatory(request.resource.data.personName) : true
          && request.resource.data.gender != null ? checkMandatory(request.resource.data.gender) : true
          && request.resource.data.birthDate != null ? checkMandatory(request.resource.data.birthDate) : true
          && request.resource.data.email != null ? checkMandatory(request.resource.data.email) : true
          && request.resource.data.phoneNumber != null ? checkMandatory(request.resource.data.phoneNumber) : true
          && request.resource.data.address != null ? checkMandatory(request.resource.data.address) : true
          && request.resource.data.iban != null ? checkMandatory(request.resource.data.iban) : true
          ;
          

      allow delete:
          if request.auth.token.email_verified == true;
    }


        match /{klass}/{document=**}{
      allow create:
          if request.auth.token.email_verified == true
          && request.resource.data.klassId != null ? checkMandatory(request.resource.data.klassId) : true
          && request.resource.data.klassName != null ? checkMandatory(request.resource.data.klassName) : true
          && request.resource.data.instructor != null ? checkMandatory(request.resource.data.instructor) : true
          && request.resource.data.startDate != null ? checkMandatory(request.resource.data.startDate) : true
          && request.resource.data.endDate != null ? checkMandatory(request.resource.data.endDate) : true
          && request.resource.data.capacity != null ? checkMandatory(request.resource.data.capacity) : true
          && request.resource.data.registreredMember != null ? checkMandatory(request.resource.data.registreredMember) : true
          ;
      
      allow update:
          if request.auth.token.email_verified == true
          && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['klassId', 'klassName', 'instructor', 'startDate', 'endDate', 'capacity', 'registeredMember']))
          && request.resource.data.klassId != null ? checkMandatory(request.resource.data.klassId) : true
          && request.resource.data.klassName != null ? checkMandatory(request.resource.data.klassName) : true
          && request.resource.data.instructor != null ? checkMandatory(request.resource.data.instructor) : true
          && request.resource.data.startDate != null ? checkMandatory(request.resource.data.startDate) : true
          && request.resource.data.endDate != null ? checkMandatory(request.resource.data.endDate) : true
          && request.resource.data.capacity != null ? checkMandatory(request.resource.data.capacity) : true
          && request.resource.data.registreredMember != null ? checkMandatory(request.resource.data.registreredMember) : true
          ;
          

      allow delete:
          if request.auth.token.email_verified == true;
    }


        match /{membership}/{document=**}{
      allow create:
          if request.auth.token.email_verified == true
          && request.resource.data.membershipId != null ? checkMandatory(request.resource.data.membershipId) : true
          && request.resource.data.membershipName != null ? checkMandatory(request.resource.data.membershipName) : true
          && request.resource.data.price != null ? checkMandatory(request.resource.data.price) : true
          && request.resource.data.duration != null ? checkMandatory(request.resource.data.duration) : true
          && request.resource.data.membershipAccess != null ? checkMandatory(request.resource.data.membershipAccess) : true
          ;
      
      allow update:
          if request.auth.token.email_verified == true
          && (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['membershipId', 'membershipName', 'price', 'duration', 'membershipAccess']))
          && request.resource.data.membershipId != null ? checkMandatory(request.resource.data.membershipId) : true
          && request.resource.data.membershipName != null ? checkMandatory(request.resource.data.membershipName) : true
          && request.resource.data.price != null ? checkMandatory(request.resource.data.price) : true
          && request.resource.data.duration != null ? checkMandatory(request.resource.data.duration) : true
          && request.resource.data.membershipAccess != null ? checkMandatory(request.resource.data.membershipAccess) : true
          ;
          

      allow delete:
          if request.auth.token.email_verified == true;
    }
  }
}
